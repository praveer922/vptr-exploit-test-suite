#!/bin/sh
memloc=(stack heap global)
target=(independent inherited non_virtual fake_object)
type=(object_bounds_overflow sub_object_bounds_overflow type_confusion use_after_free reuse_after_free fake_object)
pointer=(vptr object_ptr)
vtable=(reuse injection)
exploit=(true false)
attack_id=1

rm csv_report_stack.csv
rm csv_report_heap.csv

echo "Index, Attack Type, Memory Location, Target, Pointer, Vtable, Exploit, Baseline, EffectiveSan, LLVM-CFI, CFIXX, LLVM-CFI + CFIXX" >> csv_report_stack.csv
echo "Index, Attack Type, Memory Location, Target, Pointer, Vtable, Exploit, Baseline, EffectiveSan, LLVM-CFI, CFIXX, LLVM-CFI + CFIXX" >> csv_report_heap.csv

for n in "${exploit[@]}"
do
  for i in "${memloc[@]}"
  do
    for j in "${target[@]}"
    do
      for k in "${type[@]}"
      do
        for l in "${pointer[@]}"
        do
          for m in "${vtable[@]}"
          do
                if [ $l == "object_ptr" ] && [ $m == "injection" ]; then
                    continue
                elif [ $i == "global" ] && [ $k == "reuse_after_free" ]; then
                    continue
                elif [ $i == "global" ] && [ $k == "use_after_free" ]; then
                    continue
                elif [ $l == "vptr" ] && [ $k == "fake_object" ]; then
                    continue
                elif [ $j == "non_virtual" ] && [ $k == "use_after_free" ]; then
                    continue
                elif [ $j == "fake_object" ] && [ $k == "use_after_free" ]; then
                    continue
                else
                  #BASELINE
      	           baseline=$(./test $i $j $k $l $m $n)
                   if [[ $baseline == *"HIJACKED"* ]]; then
                     baseline="X"
                   elif [[ $n == "false" ]] && [[ ! $baseline == *"OK"* ]]; then
                     baseline="X"
                   else
                     baseline=" "
                   fi

                   #EFFECTIVESAN
       	           fsan=$(./EffectiveSan/test_fsan $i $j $k $l $m $n)
                    if [[ $fsan == *"pointer"* ]]; then
                      fsan="X"
                    elif [[ $n == "false" ]] && [[ ! $fsan == *"OK"* ]]; then
                      fsan="X"
                    else
                      fsan=" "
                    fi

                    #LLVM-CFI
        	           cfi=$(./LLVM-CFI/test_cfi $i $j $k $l $m $n)
                     if [[ $cfi == *"HIJACKED"* ]]; then
                       cfi="X"
                     elif [[ $n == "false" ]] && [[ ! $cfi == *"OK"* ]]; then
                       cfi="X"
                     else
                       cfi=" "
                     fi

                     #CFIXX
         	           cfixx=$(./CFIXX/test_cfixx $i $j $k $l $m $n)
                      if [[ $cfixx == *"HIJACKED"* ]]; then
                        cfixx="X"
                      elif [[ $n == "false" ]] && [[ ! $cfixx == *"OK"* ]]; then
                        cfixx="X"
                      else
                        cfixx=" "
                      fi

                      #CFI + CFIXXX
          	           cfinxx=$(./test_cfixx_cfi $i $j $k $l $m $n)
                       if [[ $cfinxx == *"HIJACKED"* ]]; then
                         cfinxx="X"
                       elif [[ $n == "false" ]] && [[ ! $cfinxx == *"OK"* ]]; then
                         cfinxx="X"
                       else
                         cfinxx=" "
                       fi

                   if [[ $i == "heap" ]]; then
                      echo "$attack_id,$k,$i,$j,$l,$m,$n,$baseline,$fsan,$cfi,$cfixx,$cfinxx" >> csv_report_heap.csv
                   elif [[ $i == "stack" ]]; then
                      echo "$attack_id,$k,$i,$j,$l,$m,$n,$baseline,$fsan,$cfi,$cfixx,$cfinxx" >> csv_report_stack.csv
                   fi
                   ((attack_id++))
                  fi
          done
        done
      done
    done
  done
done
echo ""
echo "####################################################### Summary ################################################################"
echo ""
cat csv_report.csv
