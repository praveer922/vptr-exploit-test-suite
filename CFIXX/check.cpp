#include <cassert>
#include <cstdio>
#include <string>
#include <string.h>
#include <iostream>

class A
{

    public:

        float z;
        void *pad[3];
        int x;

        A(int y) : x(y) { }

        virtual void g(void)
        {
            printf("HIJACKED!\n");
        }
};


class B
{
    private:



    public:
          float z;
        void *buf[3];

        B(float w) : z(w) { }

        virtual void g(void)
        {
            printf("OK\n");
        }
};

class Base {
public:
  void *buf[3];
  int x;
  virtual void g() {
    printf("OK!\n");
  }
};

class Evil: public Base {
  public:
    virtual void g() {
      printf("HIJACKED!\n");
    }
};

class Normal: public Base {
  public:
    virtual void g() {
      printf("OK\n");
    }
};

int main(int argc, char * argv[]) {

  //Test 1: independent objects
  A * a = new A(1);
  B * b  = new B(1.0);
  printf("%p\n", a);
  printf("%p\n", b);
  memcpy((void *)b, (void *)a, sizeof(void *));
  b->g();
  delete a;
  delete b;

  //Test 2: Inherited objects
  Normal * n = new Normal();
  Evil * e = new Evil();
  memcpy((void *)n, (void *)e, sizeof(void *));
  n->g();
  delete n;
  delete e;

  //Test 3:
  B * fakeB = (B *)malloc(sizeof(B));
  A * a3 = new A(1);
  memcpy((void *)fakeB, (void *)a3, sizeof(void *));
  fakeB->g();
  delete a3;

  //Test 4:
  A * a4 = new A(1);
  B * b4 = new B(1.0);
  memcpy((double *)a4 + 1, ((double *)b4)+1, sizeof(B)-8);
  assert(b4->z == a4->z);
  a4->g();
  delete a4;
  delete b4;

return 0;
}
